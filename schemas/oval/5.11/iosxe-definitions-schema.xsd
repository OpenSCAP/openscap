<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:iosxe-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe" elementFormDefault="qualified" version="5.11">
    <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5" schemaLocation="oval-definitions-schema.xsd"/>
    <xsd:annotation>
        <xsd:documentation>The following is a description of the elements, types, and attributes that compose the IOS-XE specific tests found in Open Vulnerability and Assessment Language (OVAL). Each test is an extension of the standard test element defined in the Core Definition Schema. Through extension, each test inherits a set of elements and attributes that are shared amongst all OVAL tests. Each test is described in detail and should provide the information necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.</xsd:documentation>
        <xsd:documentation>The OVAL Schema is maintained by The MITRE Corporation and developed by the public OVAL Community. For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
        <xsd:documentation>Thanks to Omar Santos and Panos Kampanakis of Cisco for providing this test.</xsd:documentation>
        <xsd:appinfo>
            <schema>IOS-XE Definition</schema>
            <version>5.11:5.11</version>
            <date>12/18/2014 09:00:00 AM</date>
            <terms_of_use>Copyright (c) 2002-2014, The MITRE Corporation. All rights reserved.  The contents of this file are subject to the terms of the OVAL License located at http://oval.mitre.org/oval/about/termsofuse.html. See the OVAL License for the specific language governing permissions and limitations for use of this schema.  When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
            <sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
            <sch:ns prefix="iosxe-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe"/>
            <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
        </xsd:appinfo>
    </xsd:annotation>
    <!-- ================================================================================= -->
    <!-- ===============================  GLOBAL TEST  =================================== -->
    <!-- ================================================================================= -->
    <xsd:element name="global_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The global test is used to check for the existence of a particular line in the IOS-XE config file under the global context. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a global_object and the optional state element specifies the data to check.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>global_test</oval:test>
                    <oval:object>global_object</oval:object>
                    <oval:state>global_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">global_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_globaltst">
                    <sch:rule context="iosxe-def:global_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:global_object/@id"><sch:value-of select="../@id"/> - the object child element of a global_test must reference a global_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:global_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:global_state/@id"><sch:value-of select="../@id"/> - the state child element of a global_test must reference a global_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType" />
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="global_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The global_object element is used by a global test to define the object to be evaluated. For the most part this object checks for existence and is used without a state comparision. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_global_object_verify_filter_state">
                    <sch:rule context="iosxe-def:global_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:global_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='global_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="global_command" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The global_command entity identifies a specific line in the IOS-XE config file under the global context.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="global_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The global_state element defines the different information that can be found in the IOS-XE config file under the global context. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="global_command" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The global_command entity identifies a specific line in the IOS-XE config file under the global context.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ===================================  LINE TEST  ================================= -->
    <!-- ================================================================================= -->
    <xsd:element name="line_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The line test is used to check the properties of specific output lines from a SHOW command, such as show running-config. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a line_object and the optional state element specifies the data to check.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>line_test</oval:test>
                    <oval:object>line_object</oval:object>
                    <oval:state>line_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">line_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_linetst">
                    <sch:rule context="iosxe-def:line_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:line_object/@id"><sch:value-of select="../@id"/> - the object child element of a line_test must reference a line_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:line_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:line_state/@id"><sch:value-of select="../@id"/> - the state child element of a line_test must reference a line_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType" />
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="line_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The line_object element is used by a line test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A line object consists of a show_subcommand entity that is the name of a SHOW sub-command to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_line_object_verify_filter_state">
                    <sch:rule context="iosxe-def:line_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:line_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='line_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="show_subcommand" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The name of a SHOW sub-command.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="line_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The line_state element defines the different information that can be used to evaluate the result of a specific SHOW sub-command. This includes the name of ths sub-command and the corresponding config line. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="show_subcommand" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the SHOW sub-command.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="config_line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned from by the specified SHOW sub-command.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ================================  VERSION TEST  ================================= -->
    <!-- ================================================================================= -->
    <xsd:element name="version_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The version_test is used to check the version of the IOS-XE operating system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a version_object and the optional state element specifies the data to check.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>version_test</oval:test>
                    <oval:object>version_object</oval:object>
                    <oval:state>version_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">version_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_versiontst">
                    <sch:rule context="iosxe-def:version_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:version_object/@id"><sch:value-of select="../@id"/> - the object child element of a version_test must reference a version_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:version_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:version_state/@id"><sch:value-of select="../@id"/> - the state child element of a version_test must reference a version_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType" />
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="version_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The version_object element is used by a version_test to define the different version information associated with an IOS-XE system. There is actually only one object relating to version and this is the system as a whole. Therefore, there are no child entities defined.  Any OVAL Test written to check version will reference the same version_object which is basically an empty object element.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType"/>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="version_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The version_state element defines the version information held within a Cisco IOS-XE Train. A Cisco IOS-XE train is a vehicle for delivering releases that evolve from a common code base.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="platform" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The platform that is running the IOS-XE software. For example if could be asr1000. </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="rp" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The routing processor running the IOS-XE software.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="pkg" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The consolidated IOS-XE packages in the image. For example it could be adventservicesk9.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="major_release" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The major version piece of the version string. The value is an integer and in the example ASR1000rp1-ipbasek9.03.04.02.122-33.SR.bin the major_release is '03'.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="release" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The release piece of the version string. The value is an integer and in the example ASR1000rp1-ipbasek9.03.04.02.122-33.SR.bin the release version is '04'</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="rebuild" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The release piece of the version string. The value is an integer and in the example ASR1000rp1-ipbasek9.03.04.02.122-33.SR.bin the rebuild is '02'</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ios_release" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IOS release the IOS-XE was derived from. The value is an string and in the example ASR1000rp1-ipbasek9.03.04.02.122-33.SR.bin the ios_release version is '122-33'</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ios_train" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IOS release the IOS-XE was derived from. The value is an integer and in the example ASR1000rp1-ipbasek9.03.04.02.122-33.SR.bin the ios_release version is 'SR'</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ==============================  INTERFACE TEST  ================================= -->
    <!-- ================================================================================= -->
    <xsd:element name="interface_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The interface test is used to check for the existence of a particular interface on the Cisco IOS-XE device. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a interface_object and the optional state element specifies the data to check.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>interface_test</oval:test>
                    <oval:object>interface_object</oval:object>
                    <oval:state>interface_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">interface_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_interfacetst">
                    <sch:rule context="iosxe-def:interface_test/ios-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/ios-def:interface_object/@id"><sch:value-of select="../@id"/> - the object child element of an interface_test must reference an interface_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:interface_test/ios-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/ios-def:interface_state/@id"><sch:value-of select="../@id"/> - the state child element of an interface_test must reference an interface_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType" />
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="interface_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The interface_object element is used by an interface_test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>An interface_object consists of a name entity that is the name of the IOS-XE interface to be tested.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The interface name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="interface_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The interface_state element defines the different information that can be used to evaluate the result of a specific IOS-XE interface. This includes the name, status, and address information about the interface. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The interface name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ip_directed_broadcast" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Directed broadcast command enabled on the interface. The default is false.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="proxy_arp" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Proxy arp enabled on the interface. The default is true.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="shutdown" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Interface is shut down.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="hardware_addr" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The interface hardware (MAC) address.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv4_address" type="oval-def:EntityStateIPAddressStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The interface IPv4 address and mask. This element should only allow 'ipv4_address' of the oval:SimpleDatatypeEnumeration.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv6_address" type="oval-def:EntityStateIPAddressStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The interface IPv6 address and mask. This element should only allow 'ipv6_address' of the oval:SimpleDatatypeEnumeration.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv4_access_list" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ingress or egress IPv4 ACL name applied on the interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv6_access_list" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ingress or egress IPv6 ACL name applied on the interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="crypto_map" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The crypto map name applied to the interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="urpf_command" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The uRPF command under the interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_trunk_encapsulation" type="iosxe-def:EntityStateTrunkEncapType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The switchport trunk encapsulation option configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_mode" type="iosxe-def:EntityStateSwitchportModeType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The switchport mode option configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_native_vlan" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The trunk native vlan configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_access_vlan" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The access vlan configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_trunked_vlans" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The vlans that are trunked configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_pruned_vlans" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The vlans that are pruned from the trunk (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="switchport_port_security" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The switchport port-security commands configured on the interface (if applicable).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- =================================  SECTION TEST  ================================ -->
    <!-- ================================================================================= -->
    <xsd:element name="section_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The section test is used to check the properties of specific output lines from a configuration section.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>section_test</oval:test>
                    <oval:object>section_object</oval:object>
                    <oval:state>section_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">section_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_sectiontst">
                    <sch:rule context="iosxe-def:section_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:section_object/@id"><sch:value-of select="../@id"/> - the object child element of a section_test must reference a section_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:section_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:section_state/@id"><sch:value-of select="../@id"/> - the state child element of a section_test must reference a section_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="section_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The section_object element is used by a section test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A section object consists of a section_command entity that is the name of a section command to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_section_object_verify_filter_state">
                    <sch:rule context="iosxe-def:section_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:section_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='section_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="section_command" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The name of a section command.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="section_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The section_state element defines the different information that can be used to evaluate the result of a specific section command. This includes the name of ths section_command and the corresponding config lines. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="section_command" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the section command.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="section_config_lines" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned with all config lines of the section.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="config_line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned with one config line of the section at a time.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ===========================  ROUTER TEST/OBJECT/STATE =========================== -->
    <!-- ================================================================================= -->
    <xsd:element name="router_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The router test is used to check the properties of specific output lines from a router configurated instance in IOS-XE.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>router_test</oval:test>
                    <oval:object>router_object</oval:object>
                    <oval:state>router_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">router_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_routertst">
                    <sch:rule context="iosxe-def:router_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:router_object/@id"><sch:value-of select="../@id"/> - the object child element of a router_test must reference a router_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:router_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:router_state/@id"><sch:value-of select="../@id"/> - the state child element of a router_test must reference a router_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="router_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The router_object element is used by a router test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A router object consists of a router protocol and router identifier entity.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_router_object_verify_filter_state">
                    <sch:rule context="iosxe-def:router_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:router_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='router_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="protocol" type="iosxe-def:EntityObjectRoutingProtocolType">
                                    <xsd:annotation>
                                        <xsd:documentation>The routing protocol of the router instance.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element name="id" type="oval-def:EntityObjectIntType">
                                    <xsd:annotation>
                                        <xsd:documentation>The IOS-XE router id.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="router_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The router_state element defines the different information that can be used to evaluate the result of a specific router command. This includes the protocol of the router instance, the id, the networks, bgp neighbor, ospf authentication area commands and the corresponding config lines. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="protocol" type="iosxe-def:EntityStateRoutingProtocolType">
                            <xsd:annotation>
                                <xsd:documentation>The routing protocol of the router instance. If there are more than one router configurations, for example ospf instances, different objects should be created for each.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="id" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IOS-XE router id</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="network" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The subnet in the network command of the router instance. The area can be included in the string for OSPF.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="bgp_neighbor" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The BGP neighbors, if applicable.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ospf_authentication_area" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The OSPF area that is authenticated, if applicable.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="router_config_lines" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned with all config lines of the router instance.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- =======================  BGP NEIGHBOR TEST/OBJECT/STATE ========================= -->
    <!-- ================================================================================= -->
    <xsd:element name="bgpneighbor_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The bgpneighbor test is used to check the bgp neighbpr properties of bgp instances instances in IOS.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>bgpneighbor_test</oval:test>
                    <oval:object>bgpneighbor_object</oval:object>
                    <oval:state>bgpneighbor_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">bgpneighbor_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_bgpneighbortst">
                    <sch:rule context="iosxe-def:bgpneighbor_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:bgpneighbor_object/@id"><sch:value-of select="../@id"/> - the object child element of a bgpneighbor_test must reference a bgpneighbor_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:bgpneighbor_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:bgpneighbor_state/@id"><sch:value-of select="../@id"/> - the state child element of a bgpneighbor_test must reference a bgpneighbor_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="bgpneighbor_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The bgpneighbor_object element is used by a bgpneighbor test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A bgpneighbor object consists of a neighbor entity.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_bgpneighbor_object_verify_filter_state">
                    <sch:rule context="iosxe-def:bgpneighbor_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:bgpneighbor_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='bgpneighbor_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="neighbor" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The bgp neighbor.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="bgpneighbor_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The bgpneighbor_state element defines the different information that can be used to evaluate the result of a bgp neighbor configuration. This includes the neighbor and the password option, if configured. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="neighbor" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The bgp neighbor.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="password" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The bgp authentication password, if configured. If Encryption type is configured it should be included in the password string. For example '0 cisco123'. </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ===========  ROUTING PROTOCOL AUTHENTICATION INTERFACE TEST/OBJECT/STATE ======== -->
    <!-- ================================================================================= -->
    <xsd:element name="routingprotocolauthintf_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The routing protocol authentication interface test is used to check the properties of routing protocol authentication configured under interfaces in IOS.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>routingprotocolauthintf_test</oval:test>
                    <oval:object>routingprotocolauthintf_object</oval:object>
                    <oval:state>routingprotocolauthintf_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">routingprotocolauthintf_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_routingprotocolauthintftst">
                    <sch:rule context="iosxe-def:routingprotocolauthintf_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:routingprotocolauthintf_object/@id"><sch:value-of select="../@id"/> - the object child element of a routingprotocolauthintf_test must reference a routingprotocolauthintf_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:routingprotocolauthintf_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:routingprotocolauthintf_state/@id"><sch:value-of select="../@id"/> - the state child element of a routingprotocolauthintf_test must reference a routingprotocolauthintf_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="routingprotocolauthintf_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The routingprotocolauthintf_object element is used by a routingprotocolauthintf test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A routingprotocolauthintf object consists of an interface and the routing protocol that is authenticated entity.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_routingprotocolauthintf_object_verify_filter_state">
                    <sch:rule context="iosxe-def:routingprotocolauthintf_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:routingprotocolauthintf_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='routingprotocolauthintf_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="interface" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The interface name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element name="protocol" type="iosxe-def:EntityObjectRoutingProtocolType">
                                    <xsd:annotation>
                                        <xsd:documentation>The routing protocol.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="routingprotocolauthintf_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The routingprotocolauthintf_state element defines the different information that can be used to evaluate the result of a specific routing protocol interface authentication configurations. This includes the interface, the protocol, the id, the authentication type, the ospf area, the key chain command and the corresponding config lines. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="interface" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The interface name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="protocol" type="iosxe-def:EntityStateRoutingProtocolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The routing protocol.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="id" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The routing protocol id, if applicable.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="auth_type" type="iosxe-def:EntityStateRoutingAuthTypeStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The routing protocol authentication type.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ospf_area" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The OSPF area that is authenticated, if applicable.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="key_chain" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the key chain, if applicable.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ================================== IOS-XE ACL TEST  ============================= -->
    <!-- ================================================================================= -->
    <xsd:element name="acl_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The acl test is used to check the properties of specific output lines from an ACL configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>acl_test</oval:test>
                    <oval:object>acl_object</oval:object>
                    <oval:state>acl_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">acl_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_acltst">
                    <sch:rule context="iosxe-def:acl_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:acl_object/@id"><sch:value-of select="../@id"/> - the object child element of a acl_test must reference a acl_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:acl_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:acl_state/@id"><sch:value-of select="../@id"/> - the state child element of a acl_test must reference a acl_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="acl_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The acl_object element is used by an acl test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>An acl object consists of a an acl name and an IP version entity that is the name and the IP protocol version of the access-list to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_acl_object_verify_filter_state">
                    <sch:rule context="iosxe-def:acl_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:acl_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='acl_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The name of the ACL.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element name="ip_version" type="iosxe-def:EntityObjectAccessListIPVersionType">
                                    <xsd:annotation>
                                        <xsd:documentation>The IP version of the ACL.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="acl_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The acl_state element defines the different information that can be used to evaluate the result of a specific ACL configuration. This includes the name of ths ACL and the corresponding config lines. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the ACL.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ip_version" type="iosxe-def:EntityStateAccessListIPVersionType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IP version of the ACL.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="use" type="iosxe-def:EntityStateAccessListUseType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The feature where the ACL is used.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="used_in" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of where the ACL is used. For example if use is 'INTERFACE', use_in will be the name of the interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="interface_direction" type="iosxe-def:EntityStateAccessListInterfaceDirectionType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The direction the ACL is applied on an interface.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="acl_config_lines" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned with all config lines of the ACL.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="config_line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value returned with one ACL config line at a time.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- =============================== IOS-XE SNMP HOST TEST =========================== -->
    <!-- ================================================================================= -->
    <xsd:element name="snmphost_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The snmphost test is used to check the properties of specific output lines from an SNMP configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>snmphost_test</oval:test>
                    <oval:object>snmphost_object</oval:object>
                    <oval:state>snmphost_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">snmphost_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_hosttst">
                    <sch:rule context="iosxe-def:snmphost_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:snmphost_object/@id"><sch:value-of select="../@id"/> - the object child element of an snmphost_test must reference an snmphost_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:snmphost_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:snmphost_state/@id"><sch:value-of select="../@id"/> - the state child element of an snmphost_test must reference an snmphost_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmphost_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The snmphost_object element is used by an snmphost test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A snmphost object consists of a host entity that is the host of the 'snmp host' IOS-XE command to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_snmphost_object_verify_filter_state">
                    <sch:rule context="iosxe-def:snmphost_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:snmphost_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='snmphost_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="host" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The SNMP host address or hostname.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmphost_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The snmphost_state element defines the different information that can be used to evaluate the result of a specific 'snmp host' IOS-XE command. This includes the host and the corresponding options. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="host" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP host address or hostname.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="community_or_user" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The community string or SNMPv3 user configured for the host.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="version" type="iosxe-def:EntityStateSNMPVersionStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP version.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="snmpv3_sec_level" type="iosxe-def:EntityStateSNMPSecLevelStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMPv3 security configured for the host.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="traps" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP traps configured.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ========================= IOS-XE SNMP COMMUNITY TEST ============================ -->
    <!-- ================================================================================= -->
    <xsd:element name="snmpcommunity_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The snmpcommunity test is used to check the properties of specific output lines from an SNMP configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>snmpcommunity_test</oval:test>
                    <oval:object>snmpcommunity_object</oval:object>
                    <oval:state>snmpcommunity_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">snmpcommunity_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_communitytst">
                    <sch:rule context="iosxe-def:snmpcommunity_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:snmpcommunity_object/@id"><sch:value-of select="../@id"/> - the object child element of an snmpcommunity_test must reference an snmpcommunity_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:snmpcommunity_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:snmpcommunity_state/@id"><sch:value-of select="../@id"/> - the state child element of an snmpcommunity_test must reference an snmpcommunity_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpcommunity_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The snmpcommunity_object element is used by an snmpcommunity test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>An snmpcommunity object consists of a community name entity to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_snmpcommunity_object_verify_filter_state">
                    <sch:rule context="iosxe-def:snmpcommunity_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:snmpcommunity_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='snmpcommunity_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The SNMP community name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpcommunity_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The snmpcommunity_state element defines the different information that can be used to evaluate the result of a specific 'snmp community' IOS-XE command. This includes the community name and the corresponding options. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP community name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="view" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The view that restricts the OIDs of this community.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="mode" type="iosxe-def:EntityStateSNMPModeStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The read-write privileges of the community.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv4_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv4 ACL name applied to the community.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv6_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv6 ACL name applied to the community.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ============================== IOS-XE SNMP USER TEST ============================ -->
    <!-- ================================================================================= -->
    <xsd:element name="snmpuser_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The snmpuser test is used to check the properties of specific output lines from an SNMP user configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>snmpuser_test</oval:test>
                    <oval:object>snmpuser_object</oval:object>
                    <oval:state>snmpuser_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">snmpuser_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_usertst">
                    <sch:rule context="iosxe-def:snmpuser_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:snmpuser_object/@id"><sch:value-of select="../@id"/> - the object child element of an snmpuser_test must reference an snmpuser_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:snmpuser_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:snmpuser_state/@id"><sch:value-of select="../@id"/> - the state child element of an snmpuser_test must reference an snmpuser_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpuser_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The snmpuser_object element is used by an snmpuser test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A snmpuser object consists of a name entity that is the name of the SNMP user to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_snmpuser_object_verify_filter_state">
                    <sch:rule context="iosxe-def:snmpuser_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:snmpuser_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='snmpuser_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The SNMP user name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpuser_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The snmpuser_state element defines the different information that can be used to evaluate the result of a specific 'show snmp user' IOS-XE command. This includes the user name and the corresponding options. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP user name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="group" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP group the user belongs to.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="version" type="iosxe-def:EntityStateSNMPVersionStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP version of the user.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv4_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv4 ACL name applied to the user.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv6_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv6 ACL name applied to the user.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="priv" type="iosxe-def:EntityStateSNMPPrivStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP encryption type for the user (for SNMPv3).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="auth" type="iosxe-def:EntityStateSNMPAuthStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP authentication type for the user (for SNMPv3).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ============================= IOS-XE SNMP GROUP TEST ============================ -->
    <!-- ================================================================================= -->
    <xsd:element name="snmpgroup_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The snmpgroup test is used to check the properties of specific output lines from an SNMP group configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>snmpgroup_test</oval:test>
                    <oval:object>snmpgroup_object</oval:object>
                    <oval:state>snmpgroup_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">snmpgroup_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_grouptst">
                    <sch:rule context="iosxe-def:snmpgroup_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:snmpgroup_object/@id"><sch:value-of select="../@id"/> - the object child element of an snmpgroup_test must reference an snmpgroup_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:snmpgroup_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:snmpgroup_state/@id"><sch:value-of select="../@id"/> - the state child element of an snmpgroup_test must reference an snmpgroup_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpgroup_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The snmpgroup_object element is used by an snmpgroup test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A snmpgroup object consists of a name entity that is the name of the SNMP group to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_snmpgroup_object_verify_filter_state">
                    <sch:rule context="iosxe-def:snmpgroup_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:snmpgroup_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='snmpgroup_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The SNMP group name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpgroup_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The snmpgroup_state element defines the different information that can be used to evaluate the result of a specific 'snmp-server group' IOS-XE command. This includes the user name and the corresponding options. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP group name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="version" type="iosxe-def:EntityStateSNMPVersionStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP version of the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="snmpv3_sec_level" type="iosxe-def:EntityStateSNMPSecLevelStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMPv3 security configured for the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv4_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv4 ACL name applied to the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="ipv6_acl" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The IPv6 ACL name applied to the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="read_view" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP read view applied to the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="write_view" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP write view applied to the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="notify_view" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP notify view applied to the group.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ============================== IOS-XE SNMP VIEW TEST ============================ -->
    <!-- ================================================================================= -->
    <xsd:element name="snmpview_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The snmpview test is used to check the properties of specific output lines from an SNMP view configuration.</xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>snmpview_test</oval:test>
                    <oval:object>snmpview_object</oval:object>
                    <oval:state>snmpview_state</oval:state>
                    <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#iosxe">snmpview_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_viewtst">
                    <sch:rule context="iosxe-def:snmpview_test/iosxe-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/iosxe-def:snmpview_object/@id"><sch:value-of select="../@id"/> - the object child element of an snmpview_test must reference an snmpview_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="iosxe-def:snmpview_test/iosxe-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/iosxe-def:snmpview_state/@id"><sch:value-of select="../@id"/> - the state child element of an snmpview_test must reference an snmpview_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpview_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The snmpview_object element is used by an snmpview test to define the object to be evaluated. Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            <xsd:documentation>A snmpview object consists of a name entity that is the name of the SNMP view to be tested.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="iosxe-def_snmpview_object_verify_filter_state">
                    <sch:rule context="iosxe-def:snmpview_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::iosxe-def:snmpview_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#iosxe') and ($state_name='snmpview_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The SNMP view name.</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="snmpview_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The snmpview_state element defines the different information that can be used to evaluate the result of a specific 'snmp-server view' IOS-XE command. This includes the view name and the corresponding options. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP view name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="mib_family" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The SNMP MIB family of the view.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="include" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>It is true if the included option is used in the view.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- ================================================================================= -->
    <!-- ================================================================================= -->
    <!-- ================================================================================= -->
    <xsd:complexType name="EntityObjectAccessListIPVersionType">
        <xsd:annotation>
            <xsd:documentation>The EntityObjectAccessListIPVersionType complex type restricts a string value to a specific set of values: IPV4, IPV6. These values describe if an ACL is for IPv4 or IPv6 in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityObjectStringType">
                <xsd:enumeration value="IPV4"/>
                <xsd:enumeration value="IPV6"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityObjectRoutingProtocolType">
        <xsd:annotation>
            <xsd:documentation>The EntityObjectRoutingProtocolType complex type restricts a string value to a specific set of values: EIGRP, OSPF, BGP, RIP, RIPV2, ISIS. These values describe the routing protocol used in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityObjectStringType">
                <xsd:enumeration value="EIGRP"/>
                <xsd:enumeration value="OSPF"/>
                <xsd:enumeration value="BGP"/>
                <xsd:enumeration value="RIP"/>
                <xsd:enumeration value="RIPV2"/>
                <xsd:enumeration value="ISIS"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateTrunkEncapType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateTrunkEncapType complex type restricts a string value to a specific set of values: DOT1Q, ISL, NEGOTIATE. These values describe the interface trunk encapsulation types on an interfaces in IOS. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="DOT1Q" />
                <xsd:enumeration value="ISL" />
                <xsd:enumeration value="NEGOTIATE" />
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSwitchportModeType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSwitchportModeType complex type restricts a string value to a specific set of values: DYNAMIC, TRUNK, ACCESS. These values describe the interface switchport mode types in IOS. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="DYNAMIC" />
                <xsd:enumeration value="TRUNK" />
                <xsd:enumeration value="ACCESS" />
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>  
    <xsd:complexType name="EntityStateRoutingProtocolType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateRoutingProtocolType complex type restricts a string value to a specific set of values: EIGRP, OSPF, BGP, RIP, RIPV2, ISIS. These values describe the routing protocol used in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="EIGRP"/>
                <xsd:enumeration value="OSPF"/>
                <xsd:enumeration value="BGP"/>
                <xsd:enumeration value="RIP"/>
                <xsd:enumeration value="RIPV2"/>
                <xsd:enumeration value="ISIS"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateRoutingAuthTypeStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateRoutingAuthTypeStringType complex type restricts a string value to a specific set of values: CLEARTEXT, MESSAGE_DIGEST, NULL. These values describe the routing protocol authentication types used in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="CLEARTEXT"/>
                <xsd:enumeration value="MESSAGE_DIGEST"/>
                <xsd:enumeration value="NULL"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSNMPVersionStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSNMPVersionStringType complex type restricts a string value to a specific set of values: 1, 2c, 3. These values describe the SNMP version in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="1"/>
                <xsd:enumeration value="2C"/>
                <xsd:enumeration value="3"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSNMPSecLevelStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSNMPSecLevelStringType complex type restricts a string value to a specific set of values: PRIV, AUTH, NO_AUTH. These values describe the SNMP security level (encryption, Authentication, None) in a Cisco IOS-XE SNMPv3 related configurations. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="PRIV"/>
                <xsd:enumeration value="AUTH"/>
                <xsd:enumeration value="NO_AUTH"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSNMPModeStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSNMPModeStringType complex type restricts a string value to a specific set of values: RO, RW. These values describe the SNMP mode (read-only, read-write) in a Cisco IOS-XE SNMPv3 related configurations. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="RO"/>
                <xsd:enumeration value="RW"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSNMPAuthStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSNMPAuthStringType complex type restricts a string value to a specific set of values: MD5, SHA. These values describe the authentication algorithm in a Cisco IOS-XE SNMPv3 related configurations. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="MD5"/>
                <xsd:enumeration value="SHA"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateSNMPPrivStringType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateSNMPPrivStringType complex type restricts a string value to a specific set of values: DES, 3DES, AES. These values describe the encryption algorithm in a Cisco IOS-XE SNMPv3 related configurations. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="DES"/>
                <xsd:enumeration value="3DES"/>
                <xsd:enumeration value="AES"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateAccessListIPVersionType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateAccessListIPVersionType complex type restricts a string value to a specific set of values: IPV4, IPV6. These values describe if an ACL is for IPv4 or IPv6 in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="IPV4"/>
                <xsd:enumeration value="IPV6"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateAccessListUseType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateAccessListUseType complex type restricts a string value to a specific set of values: INTERFACE, CRYPTO_MAP_MATCH, CLASS_MAP_MATCH, ROUTE_MAP_MATCH, IGMP_FILTER, NONE. These values describe the ACL use in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="INTERFACE"/>
                <xsd:enumeration value="CRYPTO_MAP_MATCH"/>
                <xsd:enumeration value="CLASS_MAP_MATCH"/>
                <xsd:enumeration value="ROUTE_MAP_MATCH"/>
                <xsd:enumeration value="IGMP_FILTER"/>
                <xsd:enumeration value="NONE"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="EntityStateAccessListInterfaceDirectionType">
        <xsd:annotation>
            <xsd:documentation>The EntityStateAccessListInterfaceDirectionType complex type restricts a string value to a specific set of values: IN, OUT. These values describe the inbound or outbound ACL direction on an interface in a Cisco IOS-XE configuration. The empty string is also allowed to support empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="IN"/>
                <xsd:enumeration value="OUT"/>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:schema>