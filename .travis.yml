language: c

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - lcov
            - libdbus-1-dev
            - libdbus-glib-1-dev
            - libcurl4-openssl-dev
            - libgcrypt-dev
            - libselinux1-dev
            - libgconf2-dev
            - libacl1-dev
            - libblkid-dev
            - libcap-dev
            - libxml2-dev
            - swig
            - libxml-parser-perl
            - libxml-xpath-perl
            - libperl-dev
            - librpm-dev
            - swig
            - librtmp-dev
            - xsltproc
            - gcc-7
      before_script:
        - export CC=gcc-7 GCOV=gcov-7
        - cd build
      script:
        - CFLAGS="--coverage -ftest-coverage -fprofile-arcs" LDFLAGS=-lgcov cmake -DCMAKE_BUILD_TYPE=Debug ../
        - build-wrapper-linux-x86-64 --out-dir bw-output make all || true  # Will always fail builds on forked repositories.
        - make all
        - CTEST_OUTPUT_ON_FAILURE=1 ctest || { test "$SEND_COVERAGE_EVEN_IF_TESTS_FAIL" = yes && curl -s https://codecov.io/bash > cov.sh && bash cov.sh -x "$GCOV"; }
        - bash ../tests/recursively_generate_gcov.sh . || true  # Failures that occur here are harmless
        - cd .. && sonar-scanner || true  # Will always fail builds on forked repositories.
      after_success:
        - curl -s https://codecov.io/bash > cov.sh && bash cov.sh -x "$GCOV"
    - os: osx
      osx_image: xcode8.3
      before_install:
        - brew update
        - brew upgrade python
        - brew install doxygen --with-graphviz
        - brew install opendbx
        - brew install popt
        - brew install swig
      before_script:
        - cd build
      script:
        - cmake -DENABLE_PROBES=false ../
        - make -j 4
    - os: linux
      env: BASE_IMAGE="gcc_latest"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest
    - os: linux
      env: BASE_IMAGE="gcc_7"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest
    - os: linux
      env: BASE_IMAGE="gcc_6"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest
    - os: linux
      env: BASE_IMAGE="gcc_5"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest
    - os: linux
      env: BASE_IMAGE="gcc_4"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest
    - os: linux
      env: BASE_IMAGE="fedora_ssg"
      sudo: required
      services:
        - docker
      before_install:
        - docker build --no-cache --tag openscap_$BASE_IMAGE:latest -f Dockerfiles/$BASE_IMAGE .
      script:
        - docker run openscap_$BASE_IMAGE:latest

addons:
  sonarcloud:
    organization: "openscap"
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-7


cache:
  directories:
    - '$HOME/.sonar/cache'
