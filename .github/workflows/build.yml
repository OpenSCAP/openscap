# This is a basic workflow to help you get started with Actions

name: Gating

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main, maint-1.3 ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-ubuntu:
    # The type of runner that the job will run on
    name: Build, Test on Ubuntus
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # Runs a single command using the runners shell
    - name: Install Deps
      run: |
        sudo apt-get update
        sudo apt-get -y install lcov swig xsltproc rpm-common lua5.3 libpcre2-dev libyaml-dev libdbus-1-dev libdbus-glib-1-dev libcurl4-openssl-dev libgcrypt-dev libselinux1-dev libacl1-dev libblkid-dev libcap-dev libxml2-dev libxslt1-dev libxml-parser-perl libxml-xpath-perl libperl-dev librpm-dev librtmp-dev libxmlsec1-dev libxmlsec1-openssl python3-dbusmock python3-pytest
        sudo apt-get -y remove rpm

    # Runs a set of commands using the runners shell
    - name: Build
      working-directory: ./build
      run: |
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ../
        make all

    - name: Test
      working-directory: ./build
      run: |
        export $(dbus-launch)
        ctest --output-on-failure

  build-fedora:
    name: Build, Test on Fedora Latest (Container)
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
    - name: Install Deps
      run: dnf install -y cmake git procps-ng dbus-devel libacl-devel libblkid-devel libcap-devel libcurl-devel libgcrypt-devel libselinux-devel libxml2-devel libxslt-devel libattr-devel make openldap-devel pcre2-devel perl-XML-Parser perl-XML-XPath perl-devel python3-devel python3-dbusmock rpm-devel swig bzip2-devel gcc-c++ libyaml-devel xmlsec1-devel xmlsec1-openssl-devel hostname bzip2 lua rpm-build which strace python3-pytest
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build
      working-directory: ./build
      run: |
        cmake -DCMAKE_COMPILE_WARNING_AS_ERROR=True -DCMAKE_BUILD_TYPE=RelWithDebInfo ../
        make all
    - name: Test
      working-directory: ./build
      run: |
        export $(dbus-launch)
        ctest --output-on-failure

  build-fedora-nss:
    name: Build, Test on Fedora Rawhide (NSS) (Container)
    runs-on: ubuntu-latest
    container:
      image: fedora:rawhide
    steps:
    - name: Install Deps
      run: dnf install -y cmake git procps-ng dbus-devel libacl-devel libblkid-devel libcap-devel libcurl-devel nss-devel libselinux-devel libxml2-devel libxslt-devel libattr-devel make openldap-devel pcre2-devel perl-XML-Parser perl-XML-XPath perl-devel python3-devel python3-dbusmock rpm-devel swig bzip2-devel gcc-c++ libyaml-devel xmlsec1-devel xmlsec1-openssl-devel hostname bzip2 lua rpm-build which strace python3-pytest
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build
      working-directory: ./build
      run: |
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_CRYPTO=nss ../
        make all
    - name: Test
      working-directory: ./build
      run: |
        export $(dbus-launch)
        ctest --output-on-failure

  build-macos:
    # The type of runner that the job will run on
    name: Build, Test on macOS Latest
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    # Runs a single command using the runners shell
    - name: Install Deps
      run: |
        # Unlink and re-link to prevent errors when GitHub Mac runner images
        # install Python outside of Brew:
        brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
        brew update
        brew install doxygen
        brew install opendbx
        brew install pkg-config
        brew install popt
        brew install swig
        brew install libxmlsec1
        brew install openssl
        brew install pcre2

    # Runs a set of commands using the runners shell
    - name: Build
      run: |
        cd $GITHUB_WORKSPACE/build
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_PROBES=False ../
        make all

    - name: Test
      run: |
        cd $GITHUB_WORKSPACE/build
        echo "Tests are so broken for macOS :("
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout vcpkg
      uses: actions/checkout@v3
      with:
        path: ${{ github.workspace }}/vcpkg
        repository: microsoft/vcpkg
        fetch-depth: 1
    
    - name: Bootstrap vcpkg
      shell: pwsh
      run: "${{ github.workspace }}\\vcpkg\\scripts\\bootstrap.ps1 -disableMetrics"

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install Deps
      run: "${{ github.workspace }}\\vcpkg\\vcpkg.exe install curl libxml2 libxslt bzip2 pcre2 pthreads zlib getopt-win32 xmlsec --triplet x64-windows"

    - name: Configure
      working-directory: ./build
      run: cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_PYTHON3=FALSE -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake ..

    - name: Build
      run: cmake --build . --config Release
      working-directory: ./build
    
    - name: Package
      run: cpack
      working-directory: build

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openscap-win64
        path: |-
          build\OpenSCAP*.msi
          build\OpenSCAP*.msi.sha512
